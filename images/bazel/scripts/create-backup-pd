#!/bin/bash

SCRIPTS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
. ${SCRIPTS_DIR}/all-utilities || { echo "Cannot load Bash utilities" ; exit 1 ; }

BUCKET='istio-tools/jenkins/images'
DISK='jenkins-home'
OWNER='istio'
SHA=""
TMP_DIR="$(mktemp -d /tmp/jkpd.XXXX)"
MNT_DIR="${TMP_DIR}/mnt"
ZONE='us-central1-f'

function usage () {
   cat <<EOF
Usage:
    -b  Bucket name where backup disk be stored (Optional, default:istio-tools/jenkins/images)
    -d  Name for backup disk (Optional, default:jenkins-home)
    -o  Github Owner (Optional, default:istio)
    -s  SHA which collected jenkins secrets (Necessry)
    -z  Specify zone (Optional, default:us-central1-f)
EOF
exit 1
}

function disconnect {
  if [[ -n ${LOOP_DEVICE} ]]; then
    # Checking if loop device is mounted
    mount | grep ${LOOP_DEVICE}
    if [[ ${?} -eq 0 ]]; then
      ${SUDO} umount ${LOOP_DEVICE} \
        || error_exit "Could not umount ${LOOP_DEVICE}"
      echo ">>>>>>>>>>>>>>>>>>>> Unmounted ${LOOP_DEVICE}"
    fi
    ${SUDO} losetup -d ${LOOP_DEVICE} \
      || error_exit "Could not delete loop device ${LOOP_DEVICE}"
    echo ">>>>>>>>>>>>>>>>>>>> Deleted Loop device ${LOOP_DEVICE}"
    LOOP_DEVICE=''
  fi
}

function cleanup {
  disconnect
  rm -rf ${TMP_DIR}
}

trap cleanup EXIT

while getopts :b:d:ho:s:z: arg; do
  case ${arg} in
    b) BUCKET="${OPTARG}";;
    d) DISK="${OPTARG}";;
    h) usage;;
    o) OWNER="${OPTARG}";;
    s) SHA="${OPTARG}";;
    z) ZONE="${OPTARG}";;
    *) error_exit "Unrecognized argument ${OPTARG}";;
  esac
done

GITHUB_URL="https://github.com/${OWNER}/test-infra"

if ["${SHA}" = ""]; then
  error_exit 'Missing SHA for secrets. Please use -s'
fi

mkdir -p "${MNT_DIR}"

cd "${TMP_DIR}"
dd if=/dev/zero of=disk.raw bs=1024k seek=102400 count=0 \
  || error_exit "Could not create raw disk image"
echo '>>>>>>>>>>>>>>>>>>>> Created a blank image.'

LOOP_DEVICE="$(${SUDO} losetup -f)" \
  || error_exit 'Cannot get a loop device'

${SUDO} losetup "${LOOP_DEVICE}" disk.raw \
  || error_exit 'Could not create a loop device with disk.raw'

${SUDO} mkfs.ext4 -F -E lazy_itable_init=0,lazy_journal_init=0 "${LOOP_DEVICE}" \
  || error_exit "Failed to format device ${LOOP_DEVICE}"
echo '>>>>>>>>>>>>>>>>>>>> Formatted the block in ext4.'

${SUDO} mount "${LOOP_DEVICE}" "${MNT_DIR}" \
  || error_exit "Could not mount ${LOOP_DEVICE} to ${MNT_DIR}"
[[ -n "${USER}" ]] && ${SUDO} chown -R ${USER} ${TMP_DIR} \
  || error_exit 'Could not change permission on files'

echo '>>>>>>>>>>>>>>>>>>>> Mounted to mnt.'

git clone "${GITHUB_URL}" \
  || error_exit 'Failed to clone test-infra'
pushd test-infra
git reset --hard ${SHA} \
  || error_exit 'Could not reset to ${SHA}'
ARCHIVE="$(cat jenkins_home/creds.ref)"
echo "Downloading secrets from ${ARCHIVE}"
gsutil cp "${ARCHIVE}" - \
  | tar -zxf - -C jenkins_home --strip-components=2 \
  || error_exit 'Failed to copy jenkins secrets.'
popd

echo 'Copying content to disk'
cp -R test-infra/jenkins_home/* "${MNT_DIR}"/ \
  || error_exit 'Failed to copy files'

${SUDO} chown -R 1000:1000 "${MNT_DIR}"
#Change owner to 'jenkins' whose uid and gid are 1000
echo '>>>>>>>>>>>>>>>>>>>> Loaded source code to the image.'

disconnect

tar -cSzvf jenkins-home.tar.gz disk.raw \
  || error_exit 'Could not create archive'
echo '>>>>>>>>>>>>>>>>>>>> Packaged the image.'

gsutil cp jenkins-home.tar.gz gs://${BUCKET}/ \
  || error_exit 'Failed to copy arvice to cloud storage'
echo '>>>>>>>>>>>>>>>>>>>> Uploaded to Cloud Storage.'

gcloud compute images create ${DISK}-image --source-uri \
  gs://${BUCKET}/jenkins-home.tar.gz \
  || error_exit 'Failed to create disk image'
echo '>>>>>>>>>>>>>>>>>>>> Created a CE image.'

gcloud compute disks create ${DISK} \
  --zone ${ZONE} --size 100 --image ${DISK}-image --type "pd-ssd" \
  || error_exit 'Could not create disk'
echo '>>>>>>>>>>>>>>>>>>>> Created a CE disk jenkins-home.'

